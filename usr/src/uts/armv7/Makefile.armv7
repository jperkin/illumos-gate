#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright (c) 2013, Joyent, Inc.  All rights reserved.
# Copyright (c) 2015, Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
#

#
# armv7 common Makefile
#

UTSTREE=$(UTSBASE)

#
#	Machine type (implementation architecture):
#
PLATFORM	 = armv7

#
#	uname -m value
#
UNAME_M		= $(PLATFORM)

#
# Definitions for the platform-specific /platform directories.
#
#	We have one IMPLEMENTATION per board that we support. Currently we only
#	support one real board (Raspberry Pi 2+).  The requirements for
#	IMPLEMENTATIONS will most likely change over time.
#
IMPLEMENTATIONS = bcm2836

UNIX_DIR	= $(UTSBASE)/$(PLATFORM)/bcm2836/unix
GENLIB_DIR	= $(UTSBASE)/arm/genunix
MODSTUBS_DIR	= $(UNIX_DIR)
DSF_DIR		= $(UTSBASE)/$(PLATFORM)/genassym

DTRACESTUBS_O	= $(OBJS_DIR)/dtracestubs.o
DTRACESTUBS	= $(OBJS_DIR)/dtracestubs.so

SYM_MOD		= $(OBJS_DIR)/unix.sym

UNIX_O		= $(UNIX_DIR)/$(OBJS_DIR)/unix.o
MODSTUB_O	= $(MODSTUBS_DIR)/$(OBJS_DIR)/modstubs.o
GENLIB		= $(GENLIB_DIR)/$(OBJS_DIR)/libgenunix.so


#
#	Include the makefiles which define build rule templates, the
#	collection of files per module, and a few specific flags. Note
#	that order is significant, just as with an include path. The
#	first build rule template which matches the files name will be
#	used. By including these in order from most machine dependent
#	to most machine independent, we allow a machine dependent file
#	to be used in preference over a machine independent version
#	(Such as a machine specific optimization, which preserves the
#	interfaces.)
#
#include $(UTSTREE)/$(PLATFORM)/Makefile.files
include $(UTSTREE)/arm/Makefile.files
include $(UTSTREE)/common/Makefile.files
# XXX: We need this to be included last, too, because we clobber stuff.  When we
# stop clobbering stuff, remove this one, and uncomment the other.
include $(UTSTREE)/$(PLATFORM)/Makefile.files

#
#	Include machine independent rules. Note that this does not imply
#	that the resulting module from rules in Makefile.uts is	machine
#	independent. Only that the build rules are machine independent.
#
include $(UTSBASE)/Makefile.uts

#
#	Define supported builds
#
DEF_BUILDS		= $(DEF_BUILDS32)
ALL_BUILDS		= $(ALL_BUILDS32)

#
#	kernel-specific optimizations; override default in Makefile.master
#

CFLAGS_XARCH_32		= $(arm_CFLAGS)
CFLAGS_XARCH		= $(CFLAGS_XARCH_$(CLASS))

COPTFLAG_32		= $(COPTFLAG)
COPTIMIZE		= $(COPTFLAG_$(CLASS))

CFLAGS			= $(CFLAGS_XARCH)
CFLAGS			+= $(COPTIMIZE)
CFLAGS			+= $(INLINES) -D_ASM_INLINES
CFLAGS			+= $(CCMODE)
CFLAGS			+= $(SPACEFLAG)
CFLAGS			+= $(CCUNBOUND)
CFLAGS			+= $(CFLAGS_uts)
CFLAGS			+= -xstrconst

ASFLAGS_XARCH_32	= $(arm_ASFLAGS)
ASFLAGS_XARCH		= $(ASFLAGS_XARCH_$(CLASS))

ASFLAGS			+= $(ASFLAGS_XARCH)

AS_INC_PATH		+= -I$(DSF_DIR)/$(OBJS_DIR)

#
#	The following must be defined for all implementations:
#
#	MAPFILE:	ld mapfile for the build of kernel/unix.
#	MODSTUBS:	Module stubs source file.
#	GENASSYM_SRC:	genassym.c
#

# XXX: A bunch of this is probably only reasonable because we expect to build
# a 'unix' here.
MAPFILE		 = $(UTSBASE)/$(PLATFORM)/bcm2836/conf/Mapfile
MODSTUBS	 = $(UTSBASE)/arm/ml/modstubs.s
GENASSYM_SRC	 = $(UTSBASE)/$(PLATFORM)/ml/genassym.c
OFFSETS_SRC	 = $(UTSBASE)/$(PLATFORM)/ml/offsets.in
PLATFORM_OFFSETS_32	= $(UTSBASE)/$(PLATFORM)/ml/mach_offsets.in
PLATFORM_OFFSETS_SRC	= $(PLATFORM_OFFSETS_$(CLASS))
KDI_OFFSETS_SRC	 = $(UTSBASE)/arm/kdi/kdi_offsets.in

#
#	Define the actual specific platforms
#
MACHINE_DEFS	 = -D$(PLATFORM) -D_MACHDEP

#
#	Debugging level
#
#	Special knowledge of which special debugging options affect which
#	file is used to optimize the build if these flags are changed.
#
DEBUG_DEFS_OBJ32	=
DEBUG_DEFS_DBG32	= -DDEBUG
DEBUG_DEFS		= $(DEBUG_DEFS_$(BUILD_TYPE))

DEBUG_COND_OBJ32	:sh = echo \\043
DEBUG_COND_DBG32	=
IF_DEBUG_OBJ		= $(DEBUG_COND_$(BUILD_TYPE))$(OBJS_DIR)/

#
#	Collect the preprocessor definitions to be associated with *all*
#	files.
#
ALL_DEFS	 = $(MACHINE_DEFS) $(WORKAROUND_DEFS) $(DEBUG_DEFS) \
		   $(OPTION_DEFS)
GENASSYM_DEFS	 = $(MACHINE_DEFS) $(OPTION_DEFS) \
			-_gcc=-fno-eliminate-unused-debug-symbols \
			-_gcc=-fno-eliminate-unused-debug-types

#
# ----- TRANSITIONAL SECTION --------------------------------------------------
#

#
#	Not everything which *should* be a module is a module yet. The
#	following is a list of such objects which are currently part of
#	the base kernel but should soon become kmods.
#
#	XXX: $(KMACCT_OBJS) is neither in the MT kernel nor was it ever
#	     made into a module. If it is made MT safe before being made
#	     into a module, it should be added to this list. It was in
#	     this list pre ON-4.0.
#
#
MACH_NOT_YET_KMODS	= $(AUTOCONF_OBJS)

#
# ----- END OF TRANSITIONAL SECTION -------------------------------------------
#

#
#	The kernels modules which are "implementation architecture"
#	specific for this machine are enumerated below. Note that most
#	of these modules must exist (in one form or another) for each
#	architecture.
#
#	Machine Specific Driver Modules (/kernel/drv)
#	DRV_KMODS are built both 32-bit and 64-bit
#	DRV_KMODS_32 are built only 32-bit
#	DRV_KMODS_64 are built only 64-bit
#
DRV_KMODS	+=

#
#	CPU Modules
#
CPU_KMODS	+=

#
#	Exec Class Modules (/kernel/exec):
#
EXEC_KMODS	+=

#
#	Scheduling Class Modules (/kernel/sched):
#
SCHED_KMODS	+=

#
#	File System Modules (/kernel/fs):
#
FS_KMODS	+=

#
#	Streams Modules (/kernel/strmod):
#
STRMOD_KMODS	+=

#
#	'System' Modules (/kernel/sys):
#
SYS_KMODS	+=

#
#	'Misc' Modules (/kernel/misc):
#
MISC_KMODS	+=

#
#	'Dacf' modules (/kernel/dacf)
#
DACF_KMODS	+=

#
#	'Mach' Modules (/kernel/mach):
#
MACH_KMODS     	+=
