#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright 2019 Team Twist My ARM
#

UTSTREE=$(UTSBASE)

#
#	Machine type (implementation architecture):
#
PLATFORM	= armv7


#
#	Everybody needs to know how to build modstubs.o and to locate
#	unix.o. We do have a generic unix, so we use that.
#

UNIX_DIR	 = $(UTSBASE)/armv7/unix
GENLIB_DIR	 = $(UTSBASE)/arm/genunix
IPDRV_DIR	 = $(UTSBASE)/arm/ip
MODSTUBS_DIR	 = $(UNIX_DIR)
DSF_DIR		 = $(UTSBASE)/$(PLATFORM)/genassym

UNIX_O		 = $(UNIX_DIR)/$(OBJS_DIR)/unix.o
GENLIB		 = $(GENLIB_DIR)/$(OBJS_DIR)/libgenunix.so
MODSTUBS_O	 = $(MODSTUBS_DIR)/$(OBJS_DIR)/modstubs.o

#
#	Include the makefiles which define build rule templates, the
#	collection of files per module, and a few specific flags. Note
#	that order is significant, just as with an include path. The
#	first build rule template which matches the files name will be
#	used. By including these in order from most machine dependent
#	to most machine independent, we allow a machine dependent file
#	to be used in preference over a machine independent version
#	(Such as a machine specific optimization, which preserves the
#	interfaces.)
#
include $(UTSTREE)/arm/Makefile.files
include $(UTSTREE)/common/Makefile.files

#
# ----- TRANSITIONAL SECTION --------------------------------------------------
#

#
#	Not everything which *should* be a module is a module yet. The
#	following is a list of such objects which are currently part of
#	genunix but which might someday become kmods.  This must be
#	defined before we include Makefile.uts, or else genunix's build
#	won't be as parallel as we might like.
#
NOT_YET_KMODS	 = $(OLDPTY_OBJS) $(PTY_OBJS) $(VCONS_CONF_OBJS) $(MOD_OBJS)

#
# ----- END OF TRANSITIONAL SECTION -------------------------------------------
#
#	Include machine independent rules. Note that this does not imply
#	that the resulting module from rules in Makefile.uts is	machine
#	independent. Only that the build rules are machine independent.
#
include $(UTSBASE)/Makefile.uts

#
#	The following must be defined for all implementations:
#	XXX: Presuming this is truly arm-common is a guess
#
MODSTUBS		= $(UTSBASE)/arm/ml/modstubs.s

#
#	Define supported builds
#
DEF_BUILDS		= $(DEF_BUILDS32)
ALL_BUILDS		= $(ALL_BUILDS32)

#
#	kernel-specific optimizations; override default in Makefile.master
#

CFLAGS_XARCH_32		= $(arm_CFLAGS)
CFLAGS_XARCH		= $(CFLAGS_XARCH_$(CLASS))

COPTFLAG_32		= $(COPTFLAG)
COPTIMIZE		= $(COPTFLAG_$(CLASS))

CFLAGS			= $(CFLAGS_XARCH)
CFLAGS			+= $(COPTIMIZE)
CFLAGS			+= $(INLINES) -D_ASM_INLINES
CFLAGS			+= $(CCMODE)
CFLAGS			+= $(SPACEFLAG)
CFLAGS			+= $(CCUNBOUND)
CFLAGS			+= $(CFLAGS_uts)
CFLAGS			+= -xstrconst

ASFLAGS_XARCH_32	= $(arm_ASFLAGS)
ASFLAGS_XARCH		= $(ASFLAGS_XARCH_$(CLASS))

ASFLAGS			+= $(ASFLAGS_XARCH)

#
#	Define the base directory for installation.
#
BASE_INS_DIR	= $(ROOT)

#
#	Debugging level
#
#	Special knowledge of which special debugging options affect which
#	file is used to optimize the build if these flags are changed.
#
DEBUG_DEFS_OBJ32	=
DEBUG_DEFS_DBG32	= -DDEBUG
DEBUG_DEFS_OBJ64	=
DEBUG_DEFS_DBG64	= -DDEBUG
DEBUG_DEFS		= $(DEBUG_DEFS_$(BUILD_TYPE))

DEBUG_COND_OBJ32	:sh = echo \\043
DEBUG_COND_DBG32	=

#
#	Collect the preprocessor definitions to be associated with *all*
#	files.
#
ALL_DEFS	 = $(DEBUG_DEFS) $(OPTION_DEFS)

#
#	The kernels modules which are "implementation architecture"
#	specific for this machine are enumerated below. Note that most
#	of these modules must exist (in one form or another) for each
#	architecture.
#
#	Common Drivers (usually pseudo drivers) (/kernel/drv)
#	DRV_KMODS are built both 32-bit and 64-bit
#	DRV_KMODS_32 are built only 32-bit
#	DRV_KMODS_64 are built only 64-bit
#
DRV_KMODS	+=

#
#	Brand modules
#
BRAND_KMODS	+= 

#
#	Exec Class Modules (/kernel/exec):
#
EXEC_KMODS	+= 

#
#	Scheduling Class Modules (/kernel/sched):
#
SCHED_KMODS	+= 

#
#	File System Modules (/kernel/fs):
#
FS_KMODS	+= 

#
#	Streams Modules (/kernel/strmod):
#
STRMOD_KMODS	+= 

#
#	'System' Modules (/kernel/sys):
#
SYS_KMODS	+= 

#
#	'Misc' Modules (/kernel/misc)
#	MISC_KMODS are built both 32-bit and 64-bit
#	MISC_KMODS_32 are built only 32-bit
#	MISC_KMODS_64 are built only 64-bit
#
MISC_KMODS	+= 

#
#	Software Cryptographic Providers (/kernel/crypto):
#
CRYPTO_KMODS	+= 

#
#	IP Policy Modules (/kernel/ipp)
#
IPP_KMODS	+= 

#
#	generic-unix module (/kernel/genunix):
#
GENUNIX_KMODS	+= genunix

#
#	'Dacf' Modules (/kernel/dacf):
#
DACF_KMODS	+=

#
#	Performance Counter BackEnd modules (/usr/kernel/pcbe)
#
PCBE_KMODS	+= 

#
#	MAC-Type Plugin Modules (/kernel/mac)
#
MAC_KMODS	+= 

#
# socketmod (kernel/socketmod)
#
SOCKET_KMODS	+= 

#
#	kiconv modules (/kernel/kiconv):
#
KICONV_KMODS	+= 
